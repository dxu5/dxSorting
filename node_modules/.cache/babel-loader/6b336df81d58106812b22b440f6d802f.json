{"ast":null,"code":"var _jsxFileName = \"/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from \"react\";\nimport { getMergeSortAnimations, getBubbleSortAnimations, getQuickSortAnimations, getHeapSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\"; //Change this value for the speed of the animations\n\nconst ANIMATION_SPEED_MS = 1; //Change this value for the number of bars (value) in the array\n\nconst NUMBER_OF_ARRAY_BARS = 310;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  calculateColor(height) {\n    var maxHeight = 640;\n    var frequency = 2 * Math.PI / maxHeight;\n    let red = Math.sin(frequency * height + 0) * 127 + 128;\n    let green = Math.sin(frequency * height + 2) * 127 + 128;\n    let blue = Math.sin(frequency * height + 4) * 127 + 128;\n    return \"rgb(\" + Math.round(red) + \",\" + Math.round(green) + \",\" + Math.round(blue) + \")\";\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentSort !== prevProps.currentSort) {\n      switch (this.props.currentSort) {\n        case \"randomBars\":\n          this.resetArray();\n          break;\n\n        case \"mergeBars\":\n          this.mergeSort();\n          break;\n\n        case \"quickBars\":\n          this.quickSort();\n          break;\n\n        case \"heapBars\":\n          this.heapSort();\n          break;\n\n        case \"bubbleBars\":\n          this.bubbleSort();\n          break;\n      }\n    }\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 640));\n    }\n\n    this.setState({\n      array\n    });\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = this.calculateColor(Number(arrayBars[i].style.height.slice(0, -2)));\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : this.calculateColor(Number(barOneStyle.height.slice(0, -2)));\n        const color2 = i % 3 === 0 ? \"red\" : this.calculateColor(Number(barTwoStyle.height.slice(0, -2)));\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color2;\n          barTwoStyle.backgroundColor = color2;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barOneStyle.backgroundColor = this.calculateColor(Number(barOneStyle.height.slice(0, -2)));\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n      }\n    }\n\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let styles = {\n      marginBottom: \"40px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: \"60px\"\n      },\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`,\n        backgroundColor: this.calculateColor(value)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubbleSortAnimations","getQuickSortAnimations","getHeapSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","calculateColor","height","maxHeight","frequency","Math","PI","red","sin","green","blue","round","componentDidUpdate","prevProps","currentSort","mergeSort","quickSort","heapSort","bubbleSort","i","push","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","length","style","backgroundColor","Number","slice","animations","isColorChange","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","color2","setTimeout","newHeight","undefined","arrayFinish","render","styles","marginBottom","marginTop","map","value","idx","min","max","floor","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  getMergeSortAnimations,\n  getBubbleSortAnimations,\n  getQuickSortAnimations,\n  getHeapSortAnimations,\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\n\n//Change this value for the speed of the animations\nconst ANIMATION_SPEED_MS = 1;\n\n//Change this value for the number of bars (value) in the array\n\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  calculateColor(height) {\n    var maxHeight = 640;\n    var frequency = (2 * Math.PI) / maxHeight;\n    let red = Math.sin(frequency * height + 0) * 127 + 128;\n    let green = Math.sin(frequency * height + 2) * 127 + 128;\n    let blue = Math.sin(frequency * height + 4) * 127 + 128;\n    return (\n      \"rgb(\" +\n      Math.round(red) +\n      \",\" +\n      Math.round(green) +\n      \",\" +\n      Math.round(blue) +\n      \")\"\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentSort !== prevProps.currentSort) {\n      switch (this.props.currentSort) {\n        case \"randomBars\":\n          this.resetArray();\n          break;\n        case \"mergeBars\":\n          this.mergeSort();\n          break;\n        case \"quickBars\":\n          this.quickSort();\n          break;\n        case \"heapBars\":\n          this.heapSort();\n          break;\n        case \"bubbleBars\":\n          this.bubbleSort();\n          break;\n      }\n    }\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 640));\n    }\n    this.setState({ array });\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = this.calculateColor(\n        Number(arrayBars[i].style.height.slice(0, -2))\n      );\n    }\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color =\n          i % 3 === 0\n            ? \"red\"\n            : this.calculateColor(Number(barOneStyle.height.slice(0, -2)));\n        const color2 =\n          i % 3 === 0\n            ? \"red\"\n            : this.calculateColor(Number(barTwoStyle.height.slice(0, -2)));\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color2;\n          barTwoStyle.backgroundColor = color2;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          barOneStyle.backgroundColor = this.calculateColor(\n            Number(barOneStyle.height.slice(0, -2))\n          );\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n      }\n    }\n    setTimeout(() => {\n      const arrayFinish = document.getElementsByClassName(\"array-bar\");\n      for (let i = 0; i < arrayFinish.length; i++) {\n        arrayFinish[i].style.backgroundColor = \"maroon\";\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  render() {\n    const { array } = this.state;\n    let styles = {\n      marginBottom: \"40px\",\n    };\n    return (\n      <div style={{ marginTop: \"60px\" }} className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              height: `${value}px`,\n              backgroundColor: this.calculateColor(value),\n            }}\n          ></div>\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}