{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    //These are the values that we're comparing: we push them once\n    //to change their color\n    animations.push([i, j]); //These are the values that we're comparing: we push them a second time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //we overwrite the value at index k in the original array with the value\n      //at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //we overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    //These are the values that we're comparing; we push them once\n    //to change their colors.\n    animations.push([i, i]); //These are the values that we're comparing; we push them a second\n    //time to revert their color.\n\n    animations.push([i, i]); //We overwrite the value at index k in the original array with the\n    //value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    //These are the values that we're comparing; we push them once\n    //to change their colors.\n    animations.push([j, j]); //These are the values that we're comparing; we push them a second\n    //time to revert their color.\n\n    animations.push([j, j]); //We overwrite the value at index k in the original array with the\n    //value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(array, animations) {\n  var n = array.length;\n\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        animations.push([j, j + 1]);\n        animations.push([j, j + 1]);\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n      }\n    }\n  }\n\n  return animations;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  quickSortHelper(array, 0, array.length, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, start = 0, end = arr.length, animations) {\n  let pivotIndex = pivot(arr, start, end, animations);\n  if (start >= end) return arr;\n  quickSortHelper(arr, start, pivotIndex, animations);\n  quickSortHelper(arr, pivotIndex + 1, end, animations);\n  return arr;\n}\n\nfunction pivot(arr, start = 0, end = arr.length + 1, animations) {\n  let pivot = arr[start],\n      pointer = start;\n\n  for (let i = start; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      pointer++;\n      swap(arr, pointer, i, animations);\n    }\n  }\n\n  swap(arr, start, pointer, animations);\n  return pointer;\n}\n\nfunction swap(list, a, b, animations) {\n  animations.push([a, b]);\n  animations.push([a, b]);\n  animations.push([a, list[b]]);\n  animations.push([b, list[a]]);\n  let tmp = list[a];\n  list[a] = list[b];\n  list[b] = tmp;\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getBubbleSortAnimations","bubbleSortHelper","n","tmp","getQuickSortAnimations","quickSortHelper","arr","start","end","pivotIndex","pivot","pointer","swap","list","a","b"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    //These are the values that we're comparing: we push them once\n    //to change their color\n    animations.push([i, j]);\n    //These are the values that we're comparing: we push them a second time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      //we overwrite the value at index k in the original array with the value\n      //at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      //we overwrite the value at index k in the original array with the value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    //These are the values that we're comparing; we push them once\n    //to change their colors.\n    animations.push([i, i]);\n    //These are the values that we're comparing; we push them a second\n    //time to revert their color.\n    animations.push([i, i]);\n    //We overwrite the value at index k in the original array with the\n    //value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    //These are the values that we're comparing; we push them once\n    //to change their colors.\n    animations.push([j, j]);\n    //These are the values that we're comparing; we push them a second\n    //time to revert their color.\n    animations.push([j, j]);\n    //We overwrite the value at index k in the original array with the\n    //value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(array, animations) {\n  var n = array.length;\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        animations.push([j, j + 1]);\n        animations.push([j, j + 1]);\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n      }\n    }\n  }\n  return animations;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  quickSortHelper(array, 0, array.length, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, start = 0, end = arr.length, animations) {\n  let pivotIndex = pivot(arr, start, end, animations);\n\n  if (start >= end) return arr;\n  quickSortHelper(arr, start, pivotIndex, animations);\n  quickSortHelper(arr, pivotIndex + 1, end, animations);\n\n  return arr;\n}\n\nfunction pivot(arr, start = 0, end = arr.length + 1, animations) {\n  let pivot = arr[start],\n    pointer = start;\n\n  for (let i = start; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      pointer++;\n      swap(arr, pointer, i, animations);\n    }\n  }\n  swap(arr, start, pointer, animations);\n\n  return pointer;\n}\nfunction swap(list, a, b, animations) {\n  animations.push([a, b]);\n  animations.push([a, b]);\n  animations.push([a, list[b]]);\n  animations.push([b, list[a]]);\n  let tmp = list[a];\n  list[a] = list[b];\n  list[b] = tmp;\n}\n"]},"metadata":{},"sourceType":"module"}