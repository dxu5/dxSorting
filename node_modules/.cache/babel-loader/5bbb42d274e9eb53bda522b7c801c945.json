{"ast":null,"code":"export const mergeSort = (array, startIdx, endIdx, animations = []) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((endIdx + 1 - startIdx) / 2);\n  const firstHalf = mergeSort(array, startIdx, middleIdx, animations);\n  const secondHalf = mergeSort(array, middleIdx, endIdx, animations);\n  const sortedArray = [];\n  let i = startIdx,\n      j = middleIdx + 1;\n\n  while (i < middleIdx + 1 && j < endIdx + 1) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","startIdx","endIdx","animations","middleIdx","Math","floor","firstHalf","secondHalf","sortedArray","i","j","push","length"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,EAA0BC,UAAU,GAAG,EAAvC,KAA8C;AACrE,MAAIF,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,MAAM,GAAG,CAAT,GAAaD,QAAd,IAA0B,CAArC,CAAlB;AACA,QAAMM,SAAS,GAAGR,SAAS,CAACC,KAAD,EAAQC,QAAR,EAAkBG,SAAlB,EAA6BD,UAA7B,CAA3B;AACA,QAAMK,UAAU,GAAGT,SAAS,CAACC,KAAD,EAAQI,SAAR,EAAmBF,MAAnB,EAA2BC,UAA3B,CAA5B;AACA,QAAMM,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAGT,QAAR;AAAA,MACEU,CAAC,GAAGP,SAAS,GAAG,CADlB;;AAEA,SAAOM,CAAC,GAAGN,SAAS,GAAG,CAAhB,IAAqBO,CAAC,GAAGT,MAAM,GAAG,CAAzC,EAA4C;AAC1C,QAAIK,SAAS,CAACG,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA7B,EAAkC;AAChCF,MAAAA,WAAW,CAACG,IAAZ,CAAiBL,SAAS,CAACG,CAAC,EAAF,CAA1B;AACD,KAFD,MAEO;AACLD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACD;AACF;;AACD,SAAOD,CAAC,GAAGH,SAAS,CAACM,MAArB,EAA6BJ,WAAW,CAACG,IAAZ,CAAiBL,SAAS,CAACG,CAAC,EAAF,CAA1B;;AAC7B,SAAOC,CAAC,GAAGH,UAAU,CAACK,MAAtB,EAA8BJ,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AAC9B,SAAOF,WAAP;AACD,CAlBM","sourcesContent":["export const mergeSort = (array, startIdx, endIdx, animations = []) => {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((endIdx + 1 - startIdx) / 2);\n  const firstHalf = mergeSort(array, startIdx, middleIdx, animations);\n  const secondHalf = mergeSort(array, middleIdx, endIdx, animations);\n  const sortedArray = [];\n  let i = startIdx,\n    j = middleIdx + 1;\n  while (i < middleIdx + 1 && j < endIdx + 1) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n  return sortedArray;\n};\n"]},"metadata":{},"sourceType":"module"}