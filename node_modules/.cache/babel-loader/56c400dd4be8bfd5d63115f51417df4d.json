{"ast":null,"code":"var _jsxFileName = \"/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from \"react\";\nimport { getMergeSortAnimations, getBubbleSortAnimations, getQuickSortAnimations, getHeapSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\"; //Change this value for the speed of the animations\n\nconst ANIMATION_SPEED_MS = 1; //Change this value for the number of bars (value) in the array\n\nconst NUMBER_OF_ARRAY_BARS = 310;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentSort !== prevProps.currentSort) {\n      switch (this.props.currentSort) {\n        case \"randomBars\":\n          this.resetArray();\n          break;\n\n        case \"mergeBars\":\n          this.mergeSort();\n          break;\n\n        case \"quickBars\":\n          this.quickSort();\n          break;\n\n        case \"heapBars\":\n          this.heapSort();\n          break;\n\n        case \"bubbleBars\":\n          this.bubbleSort();\n          break;\n      }\n    }\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 640));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n      }\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    let styles = {\n      marginBottom: \"40px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: \"60px\"\n      },\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`,\n        color: \"maroon\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubbleSortAnimations","getQuickSortAnimations","getHeapSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","componentDidUpdate","prevProps","currentSort","mergeSort","quickSort","heapSort","bubbleSort","i","push","randomIntFromInterval","setState","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","undefined","render","styles","marginBottom","marginTop","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  getMergeSortAnimations,\n  getBubbleSortAnimations,\n  getQuickSortAnimations,\n  getHeapSortAnimations,\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\n\n//Change this value for the speed of the animations\nconst ANIMATION_SPEED_MS = 1;\n\n//Change this value for the number of bars (value) in the array\n\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentSort !== prevProps.currentSort) {\n      switch (this.props.currentSort) {\n        case \"randomBars\":\n          this.resetArray();\n          break;\n        case \"mergeBars\":\n          this.mergeSort();\n          break;\n        case \"quickBars\":\n          this.quickSort();\n          break;\n        case \"heapBars\":\n          this.heapSort();\n          break;\n        case \"bubbleBars\":\n          this.bubbleSort();\n          break;\n      }\n    }\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 640));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        if (arrayBars[barOneIdx] !== undefined) {\n          const barOneStyle = arrayBars[barOneIdx].style;\n        }\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          if (arrayBars[barOneIdx] !== undefined) {\n            arrayBars[barOneIdx].style.backgroundColor = color;\n          }\n          if (arrayBars[barTwoIdx] !== undefined) {\n            arrayBars[barTwoIdx].style.backgroundColor = color;\n          }\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          if (arrayBars[barOneIdx] !== undefined) {\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }\n        }, i * 1);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n      }\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n    let styles = {\n      marginBottom: \"40px\",\n    };\n    return (\n      <div style={{ marginTop: \"60px\" }} className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{ height: `${value}px`, color: \"maroon\" }}\n          ></div>\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}