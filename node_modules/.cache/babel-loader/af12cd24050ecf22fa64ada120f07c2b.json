{"ast":null,"code":"var _jsxFileName = \"/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from \"react\";\nimport * as sortingAlgorithms from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 310; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animation = sortingAlgorithms.mergeSort(this.state.array);\n    const newAnimations = [];\n\n    for (const animation of animations) {\n      newAnimations.push(animation.comparison);\n      newAnimations.push(animation.comparison);\n      newAnimations.push(animation.swap);\n    }\n\n    for (let i = 0; i < newAnimations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const [barOneIdx, barTwoIdx] = newAnimations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 5);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = newAnimations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 5);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Generate New Bars!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"));\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","sortingAlgorithms","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animation","newAnimations","animations","comparison","swap","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","isColorChange","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as sortingAlgorithms from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < 310; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animation = sortingAlgorithms.mergeSort(this.state.array);\n    const newAnimations = [];\n    for (const animation of animations) {\n      newAnimations.push(animation.comparison);\n      newAnimations.push(animation.comparison);\n      newAnimations.push(animation.swap);\n    }\n    for (let i = 0; i < newAnimations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const [barOneIdx, barTwoIdx] = newAnimations[i];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * 5);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = newAnimations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 5);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{ height: `${value}px` }}\n          ></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Bars!</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}