{"ast":null,"code":"export const mergeSort = (array, animations = []) => {\n  if (array.length === 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, middleIdx));\n  const secondHalf = mergeSort(array.slice(middleIdx));\n  const sortedArray = [];\n  let i = 0,\n      j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","animations","length","middleIdx","Math","floor","firstHalf","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,UAAU,GAAG,EAArB,KAA4B;AACnD,MAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB,OAAOF,KAAP;AACxB,QAAMG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACE,MAAN,GAAe,CAA1B,CAAlB;AACA,QAAMI,SAAS,GAAGP,SAAS,CAACC,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeJ,SAAf,CAAD,CAA3B;AACA,QAAMK,UAAU,GAAGT,SAAS,CAACC,KAAK,CAACO,KAAN,CAAYJ,SAAZ,CAAD,CAA5B;AACA,QAAMM,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MACEC,CAAC,GAAG,CADN;;AAEA,SAAOD,CAAC,GAAGJ,SAAS,CAACJ,MAAd,IAAwBS,CAAC,GAAGH,UAAU,CAACN,MAA9C,EAAsD;AACpD,QAAII,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA7B,EAAkC;AAChCF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACD,KAFD,MAEO;AACLD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACD;AACF;;AACD,SAAOD,CAAC,GAAGJ,SAAS,CAACJ,MAArB,EAA6BO,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;;AAC7B,SAAOC,CAAC,GAAGH,UAAU,CAACN,MAAtB,EAA8BO,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AAC9B,SAAOF,WAAP;AACD,CAlBM","sourcesContent":["export const mergeSort = (array, animations = []) => {\n  if (array.length === 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, middleIdx));\n  const secondHalf = mergeSort(array.slice(middleIdx));\n  const sortedArray = [];\n  let i = 0,\n    j = 0;\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n  return sortedArray;\n};\n"]},"metadata":{},"sourceType":"module"}