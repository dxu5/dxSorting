{"ast":null,"code":"export function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx - 1, endIdx, auxiliaryArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    const animation = {};\n    animation.comparison = [i, j];\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animation.swap = [k, i];\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animation.swap = [k, j];\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n\n    animations.push(animation);\n  }\n\n  while (i <= middleIdx) {\n    animations.push({\n      comparison: [i, i],\n      swap: [k, i]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push({\n      comparison: [j, j],\n      swap: [k, j]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/derekxu/Documents/sorting/sorting/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","animation","comparison","swap","push"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,eAAT,CACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAIEL,cAJF,EAKEF,UALF,EAME;AACA,MAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAH,EAAAA,eAAe,CAACF,cAAD,EAAiBI,QAAjB,EAA2BE,SAA3B,EAAsCH,SAAtC,EAAiDL,UAAjD,CAAf;AACAI,EAAAA,eAAe,CACbF,cADa,EAEbM,SAAS,GAAG,CAFC,EAGbD,MAHa,EAIbL,cAJa,EAKbF,UALa,CAAf;AAOAW,EAAAA,OAAO,CAACN,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCL,cAAzC,EAAyDF,UAAzD,CAAP;AACD;;AAED,SAASW,OAAT,CACEN,SADF,EAEEC,QAFF,EAGEE,SAHF,EAIED,MAJF,EAKEL,cALF,EAMEF,UANF,EAOE;AACA,MAAIY,CAAC,GAAGN,QAAR;AACA,MAAIO,CAAC,GAAGP,QAAR;AACA,MAAIQ,CAAC,GAAGN,SAAS,GAAG,CAApB;;AACA,SAAOK,CAAC,IAAIL,SAAL,IAAkBM,CAAC,IAAIP,MAA9B,EAAsC;AACpC,UAAMQ,SAAS,GAAG,EAAlB;AACAA,IAAAA,SAAS,CAACC,UAAV,GAAuB,CAACH,CAAD,EAAIC,CAAJ,CAAvB;;AACA,QAAIZ,cAAc,CAACW,CAAD,CAAd,IAAqBX,cAAc,CAACY,CAAD,CAAvC,EAA4C;AAC1CC,MAAAA,SAAS,CAACE,IAAV,GAAiB,CAACL,CAAD,EAAIC,CAAJ,CAAjB;AACAR,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD,KAHD,MAGO;AACLE,MAAAA,SAAS,CAACE,IAAV,GAAiB,CAACL,CAAD,EAAIE,CAAJ,CAAjB;AACAT,MAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;;AACDd,IAAAA,UAAU,CAACkB,IAAX,CAAgBH,SAAhB;AACD;;AACD,SAAOF,CAAC,IAAIL,SAAZ,EAAuB;AACrBR,IAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdF,MAAAA,UAAU,EAAE,CAACH,CAAD,EAAIA,CAAJ,CADE;AAEdI,MAAAA,IAAI,EAAE,CAACL,CAAD,EAAIC,CAAJ;AAFQ,KAAhB;AAIAR,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACW,CAAC,EAAF,CAA/B;AACD;;AACD,SAAOC,CAAC,IAAIP,MAAZ,EAAoB;AAClBP,IAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdF,MAAAA,UAAU,EAAE,CAACF,CAAD,EAAIA,CAAJ,CADE;AAEdG,MAAAA,IAAI,EAAE,CAACL,CAAD,EAAIE,CAAJ;AAFQ,KAAhB;AAIAT,IAAAA,SAAS,CAACO,CAAC,EAAF,CAAT,GAAiBV,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;AACF","sourcesContent":["export function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(\n    auxiliaryArray,\n    middleIdx - 1,\n    endIdx,\n    auxiliaryArray,\n    animations\n  );\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    const animation = {};\n    animation.comparison = [i, j];\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animation.swap = [k, i];\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animation.swap = [k, j];\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n    animations.push(animation);\n  }\n  while (i <= middleIdx) {\n    animations.push({\n      comparison: [i, i],\n      swap: [k, i],\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push({\n      comparison: [j, j],\n      swap: [k, j],\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}